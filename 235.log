c1 = (m4 - m6 - m7 + m8 + m10)
c2 = ( - m1 - m3 - m4 - m5 + m6 + m7)
c3 = ( - m2 + m3 - m10 + m11 + m12 - m19)
c4 = (m1 + m2 + m9)
c5 = (m19 + m21 + m23)
c6 = ( - m9 - m12 + m13 + m14 - m18 - m23)
c7 = ( - m6 - m7 + m8 - m19 - m24 + m25)
c8 = (m7 + m16 - m17 + m20 - m25)
c9 = ( - m14 + m15 - m16 - m21 + m22 + m25)
c10 = (m16 - m17 + m18 - m22 - m25)

res_mul_num: [5, 6, 6, 3, 3, 6, 6, 5, 6, 5]

res_add_num: [12, 20, 24, 4, 6, 28, 16, 15, 24, 12]

Sorted indices: [5, 2, 8, 1, 6, 7, 0, 9, 4, 3]
level0:
add0: b7 + b12
add1: b5 + b6
add2: b6 + b9
add3: b4 + b5
mul4: a4 * b2
mul5: a3 * b11
add4: b3 + b6
add5: b5 + b15
mul7: a5 * b10
add6: b3 + b13
add7: b8 + b13
add8: b4 + b6
add9: b14 + b15
mul11: a3 * b14

level1:
mul0: b6 * add0
mul1: b7 * add1
mul2: b2 * add2
mul3: b9 * add3
mul6: add4 * add5
mul8: b1 * add6
mul9: b2 * add7
mul10: add8 * add9

biasï¼š
key: (1, 4), bias: 7
key: (3, 4), bias: 3
key: (1, 3), bias: 2
arr0:
[[0.04741783 0.14795395 0.07878509]
 [0.67639206 0.70755549 0.05751783]]
arr1:
[[0.40787184 0.99974294 0.18517405 0.02407585 0.89692924]
 [0.21464671 0.86103412 0.48767768 0.82047023 0.47740496]
 [0.17439003 0.14900161 0.50521802 0.21659591 0.07938662]]
res:
[[0.06483756 0.18653815 0.12073804 0.13959797 0.11941888]
 [0.43778627 1.29401786 0.49936832 0.60927106 0.94903246]]
res_ref:
[[0.06483756 0.18653815 0.12073804 0.13959797 0.11941888]
 [0.43778627 1.29401786 0.49936832 0.60927106 0.94903246]]

Result: True

