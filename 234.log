c1 = ( - m6 + m10 + m13 + m14 - m15 - m18)
c2 = (m10 - m16 + m19)
c3 = ( - m1 + m2 + m18)
c4 = (m2 - m3 + m4 - m5 - m6 - m19)
c5 = ( - m9 + m15 + m17 + m18)
c6 = (m8 - m11 + m13 + m16 + m17 + m19 - m20)
c7 = (m1 - m3 - m7 + m8 + m9 - m12 - m18)
c8 = (m5 + m11 - m12 - m19)

res_mul_num: [6, 3, 3, 6, 4, 7, 7, 4]

res_add_num: [23, 7, 7, 23, 7, 25, 25, 7]

Sorted indices: [5, 6, 0, 3, 4, 7, 1, 2]
level0:
add0: b2 + b3
add1: b2 + b10
mul1: a5 * b8
add2: b1 + b6
add3: b4 + b11
add4: b1 + b3
add5: b2 + b11
add6: b4 + b5
add7: b1 + b9
add8: b4 + b6
add9: b4 + b9
add10: b4 + b12
mul7: a2 * b7
add11: b3 + b11
add12: b1 + b3
add13: b4 + b6

level1:
mul0: add0 * add1
mul2: add2 * add3
mul3: add4 * add5
mul4: add6 * add7
mul5: add8 * add9
mul6: b6 * add10
mul8: b1 * add11
mul9: b2 * add12
mul10: b9 * add13

biasï¼š
key: (1, 2), bias: 4
key: (1, 4), bias: 3
key: (2, 4), bias: 2
key: (3, 4), bias: 4
key: (1, 3), bias: 2
arr0:
[[0.46821929 0.68531807 0.97951965]
 [0.02118522 0.90663573 0.35895507]]
arr1:
[[0.25630181 0.28522345 0.56052582 0.71487456]
 [0.21255368 0.37582544 0.14244456 0.35686414]
 [0.2738903  0.52354749 0.04892689 0.05587105]]
res:
[[0.53395326 0.90393214 0.40799368 0.63401029]
 [0.29645288 0.53470932 0.15858274 0.35874575]]
res_ref:
[[0.53395326 0.90393214 0.40799368 0.63401029]
 [0.29645288 0.53470932 0.15858274 0.35874575]]

Result: True

