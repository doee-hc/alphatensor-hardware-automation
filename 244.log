c1 = (m5 - m6 + m9 + m15 + m18 - m20 + m22 + m23 + m24 + m26)
c2 = ( - m6 + m8 - m13 - m14 + m15 + m23 + m25)
c3 = (m2 + m3 + m10 + m11 + m12 + m13 - m15 + m16)
c4 = ( - m7 + m10 + m13 + m14 - m15 + m17)
c5 = ( - m16 - m19 + m20 + m22 + m23 + m24)
c6 = ( - m8 + m9 + m11 - m17 - m19 - m21 + m22 + m23)
c7 = (m1 + m2 + m5 - m6 + m9 + m18 - m20)
c8 = (m1 - m3 + m4 + m5 - m6 - m7 + m8)

res_mul_num: [10, 7, 8, 6, 6, 8, 7, 7]

res_add_num: [39, 23, 24, 17, 23, 31, 23, 21]

Sorted indices: [0, 5, 2, 1, 6, 4, 7, 3]
level0:
add0: b2 + b3
add1: b3 + b6
add2: b8 + b10
add3: b7 + b8
add4: b4 + b9
add5: b6 + b7
add6: b1 + b6
add7: b2 + b7
add8: b2 + b4
add9: b1 + b2
add10: b5 + b6
add11: b5 + b8
add12: b1 + b4

level1:
mul0: b8 * add0
mul1: add1 * add2
mul2: add3 * add4
mul3: b10 * add5
mul4: add6 * add7
mul5: b5 * add8
mul6: b7 * add9
mul7: b2 * add10
mul8: add11 * add12

biasï¼š
arr0:
[[0.71766234 0.52291869 0.39021332 0.45068577]
 [0.70662862 0.37154914 0.0720181  0.00279909]]
arr1:
[[0.41560713 0.53410529 0.49286184 0.07374753]
 [0.30006253 0.78053071 0.58641897 0.45105846]
 [0.00262799 0.07295944 0.79101993 0.60850163]
 [0.74055907 0.35394105 0.62690098 0.67464113]]
res:
[[0.7899588  0.97944729 1.25155968 0.83028932]
 [0.40743002 0.67366471 0.62487625 0.26541401]]
res_ref:
[[0.7899588  0.97944729 1.25155968 0.83028932]
 [0.40743002 0.67366471 0.62487625 0.26541401]]

Result: True

